# Working With Text テキストでの作業

TextMateはほとんどの部分は、MailやSafariや基本的な全ての他のCocoaアプリケーションによって使われているシステムコンポ年とである`NSTextView`の振る舞いをまねようとしています。

このセクションではテキスト編集に関連した、その他の機能の一部をカバーします。

## Auto-Paired Characters (Quotes etc.)　自動的にペアになる文字（引用など）

（マークアップやソースコードのような）構造化されたテキストを書くとき、ペアになる文字があります。例えばプログラミング言語では、左中括弧(`{`)を使って、右中括弧(`}`)を使わないといったことは滅多にありません。

あなたがこれらの文字の釣り合いを保つために、TextMateは、あなたが開始文字をタイプしたときにキャレットの後に、適切な閉じる文字を挿入します。もしあなたが閉じる文字をタイプした場合、TextMateはとても賢いので自動的に挿入されたものを上書きします。もしあなたが開始文字をタイプしそれをバックデリート(&#x232B;)を使って削除すると、自動的に挿入された文字も削除されます。もしあなたが自動的に挿入された文字のみを削除したいなら、代わりにフォワードデリート(&#x2326;)を使ってください。

またテキストを選択し、開始文字によって、開始／終了文字で選択範囲を包むことができます。例えば、`foo`とタイプして、それを選択し、`(`をタイプします。そうすると、TextMateはそれを`(foo)`にして、最後の括弧の後にキャレットを移動します。

The actual character pairs are defined in the [bundle preferences][PairedCharactersPrefs] with different settings for different languages and contexts. For example, in source code an apostrophe is set up to have itself as a closing character, except for comments and strings. This is achieved using [scope selectors][ScopeSelectors].

実際の文字ペアは、さまざまな言語とコンテキストのさまざまな設定といっしょに[bundle preferences][PairedCharactersPrefs]で定義されています。例えば、ソースコードではアポストロフィは、コメントや文字列を除き、それ自身が週虜文字として登場するまでセットされます。これは[スコープセレクタ][ScopeSelectors]を使う事によって達成されています。

（[Source bundle][SourceBundle]のマクロとして定義され、いくつかの言語では上書きされる）自動にペアになった文字に関連してふたつのショートカットは:

 1. &#x2318;&#x21A9;  
    行の最後に移動し、新しい行を挿入する。
    例えば、もしあなたが、以下のように書き：
    For example if you write:

        print("foo
    キャレットの右側に`")`があると、&#x2318;&#x21A9;を使って、この二つの文字を飛ばして、新しい行を挿入します。

 2. &#x21E7;&#x2318;&#x21A9;  
    行の最後へ移動し、`;`を挿入し、新しい行を挿入します。


## Completion　補完

TextMate has a simple yet effective completion function on &#x238B;
(escape). It will complete the current word based on matches in the current document. If there are multiple matches, you can cycle through these by pressing &#x238B; continuously. It is also possible to cycle backwards using &#x21E7;&#x238B;.

The matches are sorted by distance from the caret, meaning candidates which are closer to the caret will be suggested before candidates farther away.

Two possibilities exist for augmenting this default completion. Both are done via [bundle preferences][CompletionsPrefs].

The first option is to provide a list of candidates which should always be suggested. For example the Objective-C bundle has a list of commonly used Cocoa framework methods. This is an array of the candidates, e.g.:

    completions = ( 'retain', 'release', 'autorelease', 'description' );

The other option is to set a custom shell command to gather the completions. The shell command will have the `TM_CURRENT_WORD` [environment variable][EnvVariables] available (as the word which needs to be completed) along with the other variables.

For example the C bundle has a custom completion command setup for when the caret is inside the preprocessor include directive, it looks like this:

    completionCommand = 'find "$TM_DIRECTORY" \
        -name "$TM_CURRENT_WORD*.h" -maxdepth 2 \
        -exec basename "{}" \;|sort';

This will find as matches, any file in the current directory (and direct sub-directories) which have the current word as prefix and an `.h` extension.

When you provide your own completion command (or list) you may want to disable the default matches. This can be done by setting `disableDefaultCompletion` to `1`.



## Copy and Paste コピー・ペースト

### Clipboard History　クリップボードヒストリー

Each time you copy or cut text, the text is pushed onto a stack.

By pressing &#x2303;&#x2325;&#x2318;V you will see the list of all previous clippings and can pick the one you want to paste using arrow keys. Use return to insert it and escape to dismiss the list. If you dismiss the list, the currently selected clipping will be what gets pasted the next time you use the paste function.

![Clipboard History](clipboard_history.png)

Instead of having to pick the clip from the list, you can use &#x21E7;&#x2318;V to paste the previous clip in the list. Using that key again will advance to the clip before that and so on. To go back you can use &#x2325;&#x2318;V. These key equivalents are useful when you want to make multiple copies from one document and then paste these LIFO-style (Last In First Out) into another document (or another location in the same document).

### Re-indented Paste

When pasting text, TextMate will estimate the indent of the text pasted as well as the current indent level and adjust the pasted text so that it matches the current indent.

The estimates are done using the indentation rules mentioned in the [Re-Indent Text][ReIndentText] section.

If you temporarily want to avoid this you can paste text using &#x2303;&#x2318;V. You can also permanently disable re-indented pasting in the Text Editing part of the Preferences.


## 編集モード

### フリーハンドモード

Edit &#x2192; Mode submenu (&#x2325;&#x2318;E)でフリーハンド編集を有効化／無効化でいます。

このモードが有効化されているとき、キャレットの移動は行末やタブストップに制限されません。

<!-- This is useful when working with ASCII diagrams, when inserting something at a given column on several lines (and you do not want to insert the padding) and in a few other situations. -->

これは、いくつかの行のある一定の列に何かを挿入し、（そしてパディングを挿入したくない）ときやその他のシチュエーションで、ASCIIダイアグラムでの作業に役に立ちます。

[列の選択][ColumnSelection]をしているときは、フリーハンドモードは（一時的に）有効化されるため、行末を超えて、選択範囲を作ることができます。

オプションキー(&#x2325;)を押しながらマウスをシングルクリックすることによって、行末を超えた場所にキャレットを置くことも可能です。



### Overwrite Mode

By enabling overwrite mode in the Edit &#x2192; Mode submenu (&#x2325;&#x2318;O) characters already in the document will be overwritten as you type rather than inserted as normal.

This is useful when working with column data, e.g.:

    foo     jaz
    bar     sub
    fud     dub

Imagine we want to overwrite some of the values in the first column. Somewhat similarly, we may have a line of a fixed width and want to replace part of it but preserve the width, for example we could have code like this where we must right-align the value to column 20 but want to overwrite the label:

    printf("Value is         %3d", 37).


## Find and Replace

In addition to the standard find dialog, TextMate has a Find submenu (located in the Edit menu) which gives you key equivalents for find and replace actions.

![Find Menu](find_menu.png)

### Inserting Newlines and Tabs in the Find Dialog

The find dialog uses normal system controls for accepting input. You can toggle between single line and multi line text controls using the arrow next to the Replace text field.

![Multi Line Find Dialog](multi_line_find_dialog.png)

If you need to insert a newline or tab character into either of the text fields, you can hold down option (&#x2325;) while pressing the tab (&#x21E5;) or return (&#x21A9;) key. This will insert a literal tab or newline character.


### Find Clipboard

Two useful key equivalents are &#x2318;E and &#x2318;G. The first copies the selection to the shared find clipboard. This works in the majority of applications and allows you to find the next occurrence of that string by then pressing &#x2318;G.

The find clipboard works across applications so whether in Safari, TextEdit, Mail, TextMate, Terminal, Console, or similar, one can copy the selected text to the find clipboard, switch application and use &#x2318;G to find that string.

In addition TextMate offers &#x21E7;&#x2318;E to copy the selection to the replace clipboard. This is often useful to save a trip to the find dialog, for example if you want to replace newlines with the pipe character (`|`) for a list of items, select a newline, press &#x2318;E to use that as the find string. Now type a `|`, select it and press &#x21E7;&#x2318;E so that it is copied to the replace clipboard.

The next step is then to either press &#x2303;&#x2318;F to perform the replacement in the entire document, or select the range in which you want the replacement to occur and use &#x2303;&#x21E7;&#x2318;F instead.


## Moving Text

### Increase/Decrease Indent Level

In the Text menu there is a Shift Left and Shift Right action bound to &#x2318;[ and &#x2318;]. These will increase and decrease the indent by the size of one tab.

On many european key layouts these keys are rather awkward, so in addition to these, you can also use &#x2325;&#x21E5; and &#x2325;&#x21E4; (where &#x21E4; is achieved using &#x21E7;&#x21E5;).

### Move Text Up/Down/Left/Right

If you want to move a line/block up/down a few lines or move a word/column selection, it can be done by holding down &#x2303;&#x2318; and using the arrow keys to move the selection around. It also works for moving lines up/down without a selection.

### Re-indent Text

If you have code which has broken indent, you can select it and use Text &#x2192; Indent Selection (without a selection it indents the current line).

The rules for estimating the indent are setup per-language using [bundle preferences][PreferencesItems]. For more details see the [indentation rules section][IndentRules].

## テキストの選択

テキストの選択は、通常の移動に使うキーを使いながら&#x21E7をホールドすることによってできます。それに加えて、Edit &#x2192; Selectのサブメニューには現在の語、行、パラグラフ、取り囲んでいるブラケットとドキュメント全体を選択するアクションがあります。

### 複数の行を編集する

一定の長さの複数の行の末尾に文字を追加したり、このこれらの行の最後の部分を編集する必要がある場合がよくあります。

このためにあなたは検索と置換を使うことができますが、より簡単な方法は、編集される必要がある行を選択し、Text &#x2192; Edit Each Line in Selection (&#x2325;&#x2318;A)を使うと、キャレットが選択範囲の最初の行の最後に置かれます。

そしてあなたは新しいテキストをタイプしたり、削除したり、戻って、もともとのテキストを編集したりできます。これは（その前に選択された）全ての行へミラーされます。このモードを終了するためには、現在の行からキャレットをはずしてください。


### カラムの選択

<!-- It is possible to select column data either by holding down &#x2325; and making the selection with the mouse, or making a regular selection and then pressing &#x2325; once (which toggles between the two types of selection). -->

カラムデータを&#x2325;をホールドしてマウスで選択範囲を作る事によって、もしくは、普通の選択範囲を作り&#x2325;を一度押すこと（選択範囲のふたつのタイプの間をトグルする）によってカラムデータを選択することが可能です。<!-- TODO トグルするって意味不明？　-->

カラムの選択にはは全ての普通のアクションが実行可能です。例えば、選択の移動、選択の置換、（行の）トランスポーズ、Textメニューからのアクション、シェルコマンドを通しての、選択範囲のフィルタリングなど。

## Column Movement / Typing

Using arrow up/down with &#x2325; will move the caret to the first/last row in the current column. Hold down &#x21E7; to get it selected.

![Column Data](column_data.png)

For example if you have column data as shown above with the caret in front of `foo`, press &#x2325;&#x21E7;&#x2193; and it will move the caret down in front of `fud` and leave the text between `foo` and `fud` selected.

![Column Movement](column_movement.png)

You may now either want to press &#x2325; once to switch to a zero-width column selection, then start typing to type on each line.

![Column Typing](column_typing.png)

Alternatively use &#x2325;&#x21E7;&#x2192; and then &#x2325; to leave the entire column selected (in column mode).

![Column Selection](column_selection.png)


## スマートタブの振る舞い


行のはじめでタブキーを使うと、TextMateはその行にとって正しいタブの数を推測し挿入します。もし行にテキストがある場合は、キャレットはこのテキストの前へ移動します。

もし行にすでに正しいインデント（もしくはそれ以上のインデント）がある場合は、一つのタブが挿入されます。


## スペルチェック

TextMateはシステムワイドの'Check Spelling as You Type（タイプしながらスペルチェック）'をサポートします。これはEdit &#x2192; Spellingで変更可能です。

間違ってスペルが書かれた文字がスペリングのサジェスチョンを得るためにはコンテキストメニューを出すことができます。

<!-- Since TextMate is intended for structured text it is possible to exclude parts of the document from being checked. This is done by creating a [preferences item][PreferencesItems] in the bundle editor, setting `spellChecking` to `0` and filling in the [scope selector][ScopeSelectors] with the selector to target for no spell checking. -->

TextMateは構造化されたテキストの使用を意図しているため、ドキュメントの一部をチェックの対象から除外することがかのうです。これは、バンドルエディタの[preferences item][PreferencesItems]を作り、`spellChecking`を`0`に設定し、[スコープセレクタ][ScopeSelectors]をスペルチェックをしないターゲットのセレクタに書き入れることでできます。

デフォルトではスペルチェックはソースコードでは文字列とコメントを除いて、無効化されています。またHTML, LaTex, Markdownなどではキーワードやタグのようなものでも無効化されています。



## タブの代わりにスペースを使う

TextMateはタブ文字の代わりにスペースを使うことができます。これは、ステータスバーの"Tab Size"ポップアップをクリックし、Soft Tabsを有効にすることによって可能です。

この設定はは現在の言語にのみ影響します、共通の基礎をもった全ての言語はそのオプションがまだセットされていません。同じ事がスペルチェックの状態やソフトラップ、実際のタブサイズについていえます。

![Tab Size Settings](tab_size_settings.png)

ソフトタブが有効な状態のとき、TextMateはたいていの場合まるであなたがハードタブを使っているかのように振る舞います、しかしドキュメントは実際にはスペースを含んでいます。