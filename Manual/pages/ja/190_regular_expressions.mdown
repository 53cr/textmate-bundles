# 正規表現

## イントロダクション

正規表現は、テキストのマッチのための領域固有言語です。テキストのマッチのために小さなプログラムをゼロから作ることもできますが、間違いを起こしやすいですし、面倒くさいですし、あまりポータブルでもフレキシブルでもありません。

代わりにマッチを（シンプルなケースでは）マッチする文字タイプとどれだけの文字をマッチさせたいかを決める数量詞を文字列として表現する正規表現を使います。

例えば、普通の文字と数字は文字通りマッチします。`\w`は単語の文字にマッチし、`\s`は（スペース、タブ、改行など）の空白文字にマッチします。ピリオド（`.`）は（改行をのぞいて）あらゆる文字にマッチします。

基本的な数量詞は、マッチがゼロ回かそれ以上あるアスタリスク(`*`)、１回かそれ以上nマッチするプラス(`+`)、`{min,max}`という形で表される範囲です。

これだけで、語を探す(`\w+`)機能や画像タグの中の`alt`属性(`<img.*alt=".*">`)を探す機能が手に入ります。

もっと長いテキストのマッチも必要ですが、マッチの部分集合（subset)が必要だと感じることも多いと思います。例えば、上記の例では、もし`alt`属性のテキストを置換したいとします。もし、括弧を使って、正規表現を囲むと、置換のための文字列のなかで使われうる変数を _捕まえる（キャプチャ）_ ことができます。置換のための文字列のフォーマットはこのセクションの最後で説明しますが、初めに捕まえたもの（キャプチャ）には、`$1`、２番目は`$2`を使います。

なので、`alt`属性のテキストを変えるためには、`(<img.*alt=").*(">)`を検索して、それを`$1Text Intentionally Removed$2`に置換できます。


_上記の例では`.*`が使われています。しかしながら、アスタリスク演算子はどん欲(greedy)です。つまり、（マッチする限り）できるだけたくさんの文字にマッチします。なので、どん欲ではなくしたい場合は`?`を加えて`.*?`にします。_


### 外部リソース

* [Regular-Expressions.info](http://www.regular-expressions.info/)
* A.M. Kuchlingの [Regular Expression HOWTO](http://www.amk.ca/python/howto/regex/)
* Steve Mansourの [A Tao of Regular Expressions](http://linuxreviews.org/beginner/tao_of_regular_expressions/)
* Jeffrey Friedlの [Mastering Regular Expressions](http://www.oreilly.com/catalog/regex2/) (書籍)


## TextMateでの正規表現

これはTextMateが正規表現を活用できる機会のリストです:

 * （プロジェクトに加えられた）フォルダレファランスで表示されるファイルを正規表現を使うことによってフィルタリングする。
 * 検索とプロジェクト内の検索は正規表現を代わりに使うことができます。
 * 正規表現を使ってフォールディング（たたむ）マーカを
 見つける
 * 正規表現のマッチに基づいて、インデントを計算する。
 * ランゲージグラマーは基本的には、それぞれのモードで、正規表現をもつ（サイクルつきの）木構造です。
 * スニペットでは正規表現を変数に適用できたり、（リアルタイムに）ミラーリングされたプレースホルダに適用できます。

よって、言うまでもなく正規表現はTextMateでは重要な役割をします。知らなくても幸せな生活を送ることができますが、（もしまだ詳しくないなら）本やチュートリアルなどを使って、正規表現により詳しくなることを強く推奨します。

TextMateだけではなく、(`sed`, `grep`, `awk`, `find`などの)多くのシェルコマンドでは正規表現をサポートします。PerlやRubyのような有名なスクリプト言語には、言語の深いレベルで正規表現をサポートしています。


## シンタックス (鬼車)

TextMateではK. Kosakoさんによる鬼車正規表現ライブラリを使います。

以下は<http://www.geocities.jp/kosako3/oniguruma/doc/RE.txt>からの引用です。

    Oniguruma Regular Expressions Version 3.6.0    2005/02/01

    syntax: ONIG_SYNTAX_RUBY (default)


    1. Syntax elements

      \       escape (enable or disable meta character meaning)
      |       alternation
      (...)   group
      [...]   character class  


    2. Characters

      \t           horizontal tab (0x09)
      \v           vertical tab   (0x0B)
      \n           newline        (0x0A)
      \r           return         (0x0D)
      \b           back space     (0x08)
      \f           form feed      (0x0C)
      \a           bell           (0x07)
      \e           escape         (0x1B)
      \nnn         octal char            (encoded byte value)
      \xHH         hexadecimal char      (encoded byte value)
      \x{7HHHHHHH} wide hexadecimal char (character code point value)
      \cx          control char          (character code point value)
      \C-x         control char          (character code point value)
      \M-x         meta  (x|0x80)        (character code point value)
      \M-\C-x      meta control char     (character code point value)

     (* \b is effective in character class [...] only)


    3. Character types

      .        any character (except newline)

      \w       word character

               Not Unicode:
                 alphanumeric, "_" and multibyte char. 

               Unicode:
                 General_Category --
                 (Letter|Mark|Number|Connector_Punctuation)

      \W       non word char

      \s       whitespace char

               Not Unicode:
                 \t, \n, \v, \f, \r, \x20

               Unicode:
                 0009, 000A, 000B, 000C, 000D, 0085(NEL), 
                 General_Category -- Line_Separator
                                  -- Paragraph_Separator
                                  -- Space_Separator

      \S       non whitespace char

      \d       decimal digit char

               Unicode: General_Category -- Decimal_Number

      \D       non decimal digit char

      \h       hexadecimal digit char   [0-9a-fA-F]

      \H       non hexadecimal digit char


    4. Quantifier

      greedy

        ?       1 or 0 times
        *       0 or more times
        +       1 or more times
        {n,m}   at least n but not more than m times
        {n,}    at least n times
        {,n}    at least 0 but not more than n times ({0,n})
        {n}     n times

      reluctant

        ??      1 or 0 times
        *?      0 or more times
        +?      1 or more times
        {n,m}?  at least n but not more than m times  
        {n,}?   at least n times
        {,n}?   at least 0 but not more than n times (== {0,n}?)

      possessive (greedy and does not backtrack after repeated)

        ?+      1 or 0 times
        *+      0 or more times
        ++      1 or more times

        ({n,m}+, {n,}+, {n}+ are possessive op. in ONIG_SYNTAX_JAVA only)

        ex. /a*+/ === /(?>a*)/


    5. Anchors

      ^       beginning of the line
      $       end of the line
      \b      word boundary
      \B      not word boundary
      \A      beginning of string
      \Z      end of string, or before newline at the end
      \z      end of string
      \G      matching start position (*)

              * Ruby Regexp:
                     previous end-of-match position
                    (This specification is not related to this library.)


    6. Character class

      ^...    negative class (lowest precedence operator)
      x-y     range from x to y
      [...]   set (character class in character class)
      ..&&..  intersection (low precedence at the next of ^)
          
        ex. [a-w&&[^c-g]z] ==> ([a-w] AND ([^c-g] OR z)) ==> [abh-w]

      * If you want to use '[', '-', ']' as a normal character
        in a character class, you should escape these characters by '\'.


      POSIX bracket ([:xxxxx:], negate [:^xxxxx:])

        Not Unicode Case:

        alnum    alphabet or digit char
        alpha    alphabet
        ascii    code value: [0 - 127]
        blank    \t, \x20
        cntrl
        digit    0-9
        graph    include all of multibyte encoded characters
        lower
        print    include all of multibyte encoded characters
        punct
        space    \t, \n, \v, \f, \r, \x20
        upper
        xdigit   0-9, a-f, A-F


        Unicode Case:

        alnum    Letter | Mark | Decimal_Number
        alpha    Letter | Mark
        ascii    0000 - 007F
        blank    Space_Separator | 0009
        cntrl    Control | Format | Unassigned | Private_Use | Surrogate
        digit    Decimal_Number
        graph    [[:^space:]] && ^Control && ^Unassigned && ^Surrogate
        lower    Lowercase_Letter
        print    [[:graph:]] | [[:space:]]
        punct    Connector_Punctuation | Dash_Punctuation |
                 Close_Punctuation | Final_Punctuation | Initial_Punctuation
                 | Other_Punctuation | Open_Punctuation
        space    Space_Separator | Line_Separator | Paragraph_Separator |
                 0009 | 000A | 000B | 000C | 000D | 0085
        upper    Uppercase_Letter
        xdigit   0030 - 0039 | 0041 - 0046 | 0061 - 0066
                 (0-9, a-f, A-F)


    7. Extended groups

      (?#...)            comment

      (?imx-imx)         option on/off
                             i: ignore case
                             m: multi-line (dot(.) match newline)
                             x: extended form
      (?imx-imx:subexp)  option on/off for subexp

      (?:subexp)         not captured group
      (subexp)           captured group

      (?=subexp)         look-ahead
      (?!subexp)         negative look-ahead
      (?<=subexp)        look-behind
      (?<!subexp)        negative look-behind

                         Subexp of look-behind must be fixed character
                         length. But different character length is allowed
                         in top level alternatives only. ex. (?<=a|bc) is
                         OK. (?<=aaa(?:b|cd)) is not allowed.

                         In negative-look-behind, captured group is not
                         allowed, but shy group(?:) is allowed.

      (?>subexp)         atomic group
                         do not backtrack in subexp.

      (?<name>subexp)    define named group
                         (All characters of the name must be a word
                         character. And first character must not be a digit
                         or uppper case)

                         Not only a name but a number is assigned like a
                         captured group.

                         Assigning the same name as two or more subexps is
                         allowed. In this case, a subexp call can not be
                         performed although the back reference is possible.


    8. Back reference

      \n          back reference by group number (n >= 1)
      \k<name>    back reference by group name

      In the back reference by the multiplex definition name,
      a subexp with a large number is referred to preferentially.
      (When not matched, a group of the small number is referred to.)

      * Back reference by group number is forbidden if named group is
        defined in the pattern and ONIG_OPTION_CAPTURE_GROUP is not setted.


    9. Subexp call ("Tanaka Akira special")

      \g<name>    call by group name
      \g<n>       call by group number (n >= 1)

      * left-most recursive call is not allowed.
         ex. (?<name>a|\g<name>b)   => error
             (?<name>a|b\g<name>c)  => OK

      * Call by group number is forbidden if named group is defined in the
        pattern and ONIG_OPTION_CAPTURE_GROUP is not setted.

      * If the option status of called group is different from calling
        position then the group is option is effective.

        ex. (?-i:\g<name>)(?i:(?<name>a)){0}  match to "A"


    10. Captured group

      Behavior of the no-named group (...) changes with the following
      conditions. (But named group is not changed.)

      case 1. /.../     (named group is not used, no option)

         (...) is treated as a captured group.

      case 2. /.../g    (named group is not used, 'g' option)

         (...) is treated as a no-captured group (?:...).

      case 3. /..(?<name>..)../   (named group is used, no option)

         (...) is treated as a no-captured group (?:...).
         numbered-backref/call is not allowed.

      case 4. /..(?<name>..)../G  (named group is used, 'G' option)

         (...) is treated as a captured group.
         numbered-backref/call is allowed.

      where
        g: ONIG_OPTION_DONT_CAPTURE_GROUP
        G: ONIG_OPTION_CAPTURE_GROUP

      ('g' and 'G' options are argued in ruby-dev ML)

      These options are not implemented in Ruby level.


    -----------------------------
    A-1. Syntax depend options

       + ONIG_SYNTAX_RUBY
         (?m): dot(.) match newline

       + ONIG_SYNTAX_PERL and ONIG_SYNTAX_JAVA
         (?s): dot(.) match newline
         (?m): ^ match after newline, $ match before newline


    A-2. Original extensions

       + hexadecimal digit char type  \h, \H
       + named group                  (?<name>...)
       + named backref                \k<name>
       + subexp call                  \g<name>, \g<group-num>


    A-3. Lacked features compare with perl 5.8.0

       + [:word:]
       + \N{name}
       + \l,\u,\L,\U, \X, \C
       + (?{code})
       + (??{code})
       + (?(condition)yes-pat|no-pat)

       * \Q...\E
         This is effective on ONIG_SYNTAX_PERL and ONIG_SYNTAX_JAVA.

       * \p{property}, \P{property}
         This is effective on ONIG_SYNTAX_PERL and ONIG_SYNTAX_JAVA.
         Alnum, Alpha, Blank, Cntrl, Digit, Graph, Lower,
         Print, Punct, Space, Upper, XDigit, ASCII are supported.

         Prefix 'Is' of property name is allowed in ONIG_SYNTAX_PERL only.
         ex. \p{IsXDigit}.

         Negation operator of property is supported in ONIG_SYNTAX_PERL only.
         \p{^...}, \P{^...}


    A-4. Differences with Japanized GNU regex(version 0.12) of Ruby

       + add hexadecimal digit char type (\h, \H)
       + add look-behind
         (?<=fixed-char-length-pattern), (?<!fixed-char-length-pattern)
       + add possessive quantifier. ?+, *+, ++
       + add operations in character class. [], &&
         ('[' must be escaped as an usual char in character class.)
       + add named group and subexp call.
       + octal or hexadecimal number sequence can be treated as 
         a multibyte code char in character class if multibyte encoding
         is specified.
         (ex. [\xa1\xa2], [\xa1\xa7-\xa4\xa1])
       + allow the range of single byte char and multibyte char in character
         class.
         ex. /[a-<<any EUC-JP character>>]/ in EUC-JP encoding.
       + effect range of isolated option is to next ')'.
         ex. (?:(?i)a|b) is interpreted as (?:(?i:a|b)), not (?:(?i:a)|b).
       + isolated option is not transparent to previous pattern.
         ex. a(?i)* is a syntax error pattern.
       + allowed incompleted left brace as an usual string.
         ex. /{/, /({)/, /a{2,3/ etc...
       + negative POSIX bracket [:^xxxx:] is supported.
       + POSIX bracket [:ascii:] is added.
       + repeat of look-ahead is not allowed.
         ex. /(?=a)*/, /(?!b){5}/
       + Ignore case option is effective to numbered character.
         ex. /\x61/i =~ "A"
       + In the range quantifier, the number of the minimum is omissible.
         /a{,n}/ == /a{0,n}/
         The simultanious abbreviation of the number of times of the minimum
         and the maximum is not allowed. (/a{,}/)
       + /a{n}?/ is not a non-greedy operator.
         /a{n}?/ == /(?:a{n})?/
       + Zero-length match in infinite repeat stops the repeat,
         then changes of the capture group status are checked as stop
         condition.
         /(?:()|())*\1\2/ =~ ""
         /(?:\1a|())*/ =~ "a"


    A-5. Disabled functions by default syntax

       + capture history

         (?@...) and (?@<name>...)

         ex. /(?@a)*/.match("aaa") ==> [<0-1>, <1-2>, <2-3>]

         see sample/listcap.c file.


    A-6. Problems

       + Invalid encoding byte sequence is not checked in UTF-8.

         * Invalid first byte is treated as a character.
           /./u =~ "\xa3"

         * Incomplete byte sequence is not checked.
           /\w+/ =~ "a\xf3\x8ec"

    // END


## 置換文字列シンタックス（フォーマット文字列）


正規表現の置換を使うとき、置換のための文字列は、キャプチャを参照したり、ケースフォールディングを実行したり、（キャプチャのレジスタに基づいて）条件付きの挿入をしたり、最小限のエスケープ文字列をサポートするフォーマット文字列として解釈されます。

### キャプチャ

キャプチャを参照するには、`$n`を使ってください（`n`はキャプチャレジスタの番号です）。`$0`はマッチ全体を意味します。

用例:

       検索: <img src="(.*?)">
    置換: <img src="$1" alt="$1">

### コードフォールディング

`\u`か`\l`を先頭に追加することによってその次文字を大文字に変えたり、小文字に変えたりすることができます。これは、主に、その次の文字がキャプチャレジスタに由来するときに便利です。用例:


       検索: (<a.*?>)(.*?)(</a>)
    置換: $1\u$2$3

より長い文字列を`\U`や`\L`を使って大文字や小文字に変換できます。`E`を使って、コードフォールディングを無効にできます。用例:

       検索: (<a.*?>)(.*?)(</a>)
    置換: $1\U$2\E$3

### 条件付きの挿入

置換が何かがマッチしたかどうかによることがあります。これは、キャプチャ`«n»`がマッチしたら、`«insertion»`を挿入するために、`(?«n»:«insertion»)`を使えばできます。キャプチャ`«n»`がマッチしなかったら、`«otherwise»`を挿入するために`(?«n»:«insertion»:«otherwise»)`を使うこともできます。

キャプチャを条件付きにするには、`foo|(bar)|fud`のように変形の中に置いてください。もしくは、`(bar)?`のようにクエスチョンマークを加えることができます。`(.*)`ゼロ個の文字でもマッチしてしまうので、代わりに`(.+)?`を使ってください。

例えば、もし文字五文字以上の時に、８文字に切り詰めて、省略記号を挿入したい時には、、以下のようにします:

       検索: (\w+(?:\W+\w+){,7})\W*(.+)?
       置換: $1(?2:…)

ここではまず、それぞれの語が語ではない文字（スペースに）先行された、７つの語(`(?:\W+\w+){,7}`)が後にくる(`\w+`)にマッチさせます。その後、、任意で、キャプチャレジスタ２(`(.+)?`)へ（語ではない文字によって区切られた）それに続くものは何でも書き入れます。

置換はまず、マッチした８文字まで(`$1`)を挿入します。それからもしキャプチャ２が何かにしたら、省略記号(`(?2:…)`)を挿入します。

### エスケープコード

ケースフォールディングのエスケープコードに加えて、`\n`で改行文字を、`\t`でタブ文字を、`\$`でドル文字を挿入できます。




















