<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/ruby -w

# To use this function, type the desired tab trigger plus "@@" (minus quotes)
#
# Notes - for some reason, you need to pause before hitting the tab key.
# Also, the search for the tab command will stop at the first match,
# so put shorter commands before longer, e.g., t before tw.

# This is where the GTD files are kept
$myPath = ENV['TM_DIRECTORY'] 
tabCommand = ENV['TM_CURRENT_LINE']

$contexts = [] #user defined contexts
def readContexts(a,re)
  # processes contexts.gtd into script
  if a =~ re
    context = "#{$`}"
    a = "#{$'}"
    if a =~ re
      tabCommand = "#{$`}"
      a = "#{$'}"
      if a =~ re
        tabString = "#{$`}"
         a = "#{$'}"
        if a =~ re
          regex = "#{$`}"
          color = "#{$'}"
        end
      end
    end
  end
  tasks = []
  $contexts.push({:context =&gt; context, :tabCommand =&gt; tabCommand, :tabString =&gt; tabString, :regex =&gt; regex, :color =&gt; color, :tasks =&gt; tasks})   
end

def reportContexts
  # a simple test
  $contexts.each do |tag|
    puts("Context: " + tag[:context])
    puts("tabCommand: " + tag[:tabCommand])
    puts("tabString: " + tag[:tabString])
    puts("Search String: " + tag[:regex])
    puts("Color: " + tag[:color])
    i = 0
    while i &lt; tag[:tasks].length
      puts "Task: " + tag[:tasks][i]
      i = i + 1
    end
  end
end

def myParse tabCommand
  found = 0
  $contexts.each do |tag|
    re = Regexp.new(tag[:tabCommand])
    if (tabCommand =~ re) and (found == 0) 
      puts tag[:tabString]
      found = 1
    end
  end
end


# the contexts.gtd file is read, and converted into $contexts
file = File.open($myPath+"/contexts.gtd", "r")
file.each do |line|
  readContexts(line.chomp,/\|/)
end    

#puts tabCommand
myParse tabCommand</string>
	<key>fallbackInput</key>
	<string>line</string>
	<key>input</key>
	<string>selection</string>
	<key>name</key>
	<string>Execute Tab Command</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>text.plain.gtd</string>
	<key>tabTrigger</key>
	<string>zz</string>
	<key>uuid</key>
	<string>C44163AC-12EE-4DEC-8654-101A0F1D9332</string>
</dict>
</plist>
