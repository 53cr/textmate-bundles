{
	
	/*--------------------------------------------------------------------------
	
	PERL SCRIPTING DICTIONARY
	=========================
	Originally by Eric Hsu, textmate@betterfilecabinet.com
	http://math.sfsu.edu/hsu/textmate
	
	--------------------------------------------------------------------------*/
	
	
	name = "Perl";
	scopeName = "source.perl";
	fileTypes = (pl, pm, pod);
	firstLineMatch = "^#!/.*\\bperl\\b";
	foldingStartMarker = "(/\\*|(\\{|\\[|\\()\\s*$)";
	foldingStopMarker = "(\\*/|^\\s*(\\}|\\]|\\)))";
	
	/*Auto Indenting -- comment out the next line for PEAR-style auto-indenting*/
 /*	increaseIndentPattern = "^.*(\\{[^}\"']*|\\([^)\"']*)$"; */ 
	
	
	patterns = (
		
		/* comments */
		{ name = "comment.line.number-sign.perl"; match = "(#).*$";  },
		{ name = "string.regexp.perl.find"; match = "(?<!\\\\)(\\/)(.*?)(?<!\\\\)(\\\\{2})*(\\/)";  },
		{ name = "string.regexp.perl.replace"; match = "(\\bs\\s*)(\\/)(.*?)(?<!\\\\)(\\\\{2})*(\\/)(.*?)(?<!\\\\)(\\\\{2})*(\\/)";  
		captures = { 1 = { name = "keyword.function.perl"; }; };  
		}, 
		/* This crazy regexp just looks for text surrounded by /, except for escapes ones (which are disallowed by the look-behind ?<!) and allowing a possible even number of backslashes (by (\\{2})*), which are escaped backslashes.  */
		/* fix: add s,m, tr, etc operators? */

		{ name = "variable.constant.perl";	match = "\\b(__FILE__|__LINE__|__PACKAGE__)\\b"; },
		{ name = "keyword.control.perl";	match = "\\b(continue|die|do|else|elsif|exit|for|foreach|goto|if|last|next|redo|return|select|unless|until|wait|while|switch|case|package|require|use|eval)\\b"; },

		{ name = "keyword.storage.modifier.perl";	match = "\\b(my|our|local)\\b"; },		

		{   name = "keyword.control.perl";
		    match = "\\b(continue|die|do|else|elsif|exit|for|foreach|goto|if|last|next|redo|return|select|unless|until|wait|while|switch|case)\\b"; },
		
		{ name = "keyword.function.perl";	match = "\\b(ARGV|DATA|ENV|SIG|STDERR|STDIN|STDOUT|atan2|bind|binmode|bless|caller|chdir|chmod|chomp|chop|chown|chr|chroot|close|closedir|cmp|connect|cos|crypt|dbmclose|dbmopen|defined|delete|dump|each|endgrent|endhostent|endnetent|endprotoent|endpwent|endservent|eof|eq|eval|exec|exists|exp|fcntl|fileno|flock|fork|format|formline|ge|getc|getgrent|getgrgid|getgrnam|gethostbyaddr|gethostbyname|gethostent|getlogin|getnetbyaddr|getnetbyname|getnetent|getpeername|getpgrp|getppid|getpriority|getprotobyname|getprotobynumber|getprotoent|getpwent|getpwnam|getpwuid|getservbyname|getservbyport|getservent|getsockname|getsockopt|glob|gmtime|grep|gt|hex|import|index|int|ioctl|join|keys|kill|lc|lcfirst|le|length|link|listen|local|localtime|log|lstat|lt|m|map|mkdir|msgctl|msgget|msgrcv|msgsnd|ne|no|oct|open|opendir|ord|pack|pipe|pop|pos|print|printf|push|q|qq|quotemeta|qw|qx|rand|read|readdir|readlink|recv|ref|rename|reset|reverse|rewinddir|rindex|rmdir|s|scalar|seek|seekdir|semctl|semget|semop|send|setgrent|sethostent|setnetent|setpgrp|setpriority|setprotoent|setpwent|setservent|setsockopt|shift|shmctl|shmget|shmread|shmwrite|shutdown|sin|sleep|socket|socketpair|sort|splice|split|sprintf|sqrt|srand|stat|study|substr|symlink|syscall|sysopen|sysread|system|syswrite|tell|telldir|tie|tied|time|times|tr|truncate|uc|ucfirst|umask|undef|unlink|unpack|unshift|untie|utime|values|vec|waitpid|wantarray|warn|write|y|q|qw|qq|qx)\\b"; },

		{  name = "declaration.function";  match = "\\bsub\\s+([^\\n{]*)";
      captures = { 1 = { name = "entity.name.function"; }; };
},
		{ name = "keyword.operator.filetest.perl";					match = "\\W\\-[rwx0RWXOezsfdlpSbctugkTBMAC]\\b"; },		
		{ name = "keyword.operator.logical.perl";					match = "\\b(and|or|xor|as)\\b"; },
		{ name = "keyword.operator.comparison.perl"; 				match = "(<=>| =>|->)"; },
		
		/* numbers and strings */
		{ name = "string.unquoted"; begin = "<< *(['\"`]?)([^;]+)(\\1);"; end = "^\\2$";
		 }, 
		{ name = "string.double-quoted.perl"; 				begin = "\""; end = "\""; swallow = "\\\\.";
		},
		{ name = "string.single-quoted.perl"; 				begin = "'"; end = "'"; swallow = "\\\\.";  },
		{ name = "string.backticked.perl"; 				begin = "`"; end = "`"; swallow = "\\\\.";  },

  	{ name = "string.double-quoted.q.perl"; begin = "\\Wq[qwx]*\\("; end = "\\)";	 patterns = (
	      { match = "(\\b(.*)\\b)"; } );
	},
	{ name = "string.double-quoted.qlinestart.perl"; begin = "^q[qwx]*\\("; end = "\\)";	 patterns = (
	      { match = "(\\b(.*)\\b)"; } );
	},
	{ name = "string.double-quoted.q-brace.perl"; begin = "\\Wq[qwx]*\\{"; end = "\\}";	 patterns = (
	      { match = "(\\b(.*)\\b)"; } );
	},
	{ name = "string.double-quoted.qlinestart-brace.perl"; begin = "^q[qwx]*\\{"; end = "\\}";	 patterns = (
	      { match = "(\\b(.*)\\b)"; } );
	},
/*	{ name = "autoquote before =>... doesn't work"; begin = "\\{"; end = "}";	 patterns = (
	      { begin="\\s*,*"; end="\\=\\b"; } );
	}, */
	
	
	
	
		/* Sections and POD */
		
		{ name = "string.program-block.perl";	 begin = "^__\\w+__"; end = "$";},
				
		{ name = "comment.block.embedded-docs.perl";	 begin = "^="; end = "^=cut";},		

		/* variables */
	{ name = "variable.readwrite.global.perl";      match = "[\\$\\@\\%][a-zA-Z\x7f-\xff\\$][a-zA-Z0-9_\x7f-\xff\\$]*\\b";  },
	{ name = "variable.readwrite.global.special.perl";      match = "[\\$\\@\\%][0-9_]\\b";  },
	{ name = "variable.readwrite.global.#.perl";      match = "[\\$\\@\\%]#[a-zA-Z\x7f-\xff\\$][a-zA-Z0-9_\x7f-\xff\\$]*\\b";  },
	{ name = "variable.readwrite.global.special#.perl";      match = "[\\$\\@\\%]#[0-9_]\\b";  }

	);
	
	uuid = "EDBFE125-6B1C-11D9-9189-000D93589AF6";
}