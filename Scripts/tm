#!/bin/sh

# Originally written by Rick Gardner (rick.gardner@mac.com)
# and Kevin Ballard (kevin@sb.org)
# Modified to work with TextMate by Andrew Ellis aellis@gmx.net (10-11-2004)
# (Jan 14 05) Added -tuw, better help. 
#	- Eric Hsu textmate@betterfilecabinet.com
# Used wait code from Marcin <otheraccount@verizon.net>
# Added Marcin's jump to line number. Autodetects Terminal or iTerm.

OPEN="open -a TextMate"
CREATE="touch"


# If you don't want the script to switch back to the Terminal (or iTerm), comment out 
# the definition of OPENTERMAPP. Or if autodetect is messing up, hardcode your terminal.

if [ "$TERM_PROGRAM" = "iTerm.app" ]; then
	OPENTERMAPP="open -a iTerm";
elif [ "$TERM_PROGRAM" = "Apple_Terminal" ]; then
	OPENTERMAPP="open -a Terminal";	
fi
	

CREATE_FILE=0
while getopts chtuwl: FLAG; do
	case $FLAG in
	c) CREATE_FILE=1;;
	l) LINE=$OPTARG;;
	t) PIPETITLE=1;;
	u) URL=1;;
	w) WAIT=1;;
	h|\?) HELP=1;;
	esac
done

shift $(($OPTIND - 1))

if (($HELP)); then
	echo ""
	echo "TextMate Command Line Tool"
	echo "usage: tm [-chtuw] filename [filename ...]"
	echo ""
	echo "This tool opens files, directories, URLs or (with no filenames) standard input."
	echo ""
	echo "    -c Create a new file."
	echo "    -h Show this help."
	echo "    -l### Jump to line ###."
	echo "    -t Specify a title for piped input. Overrides other flags."
	echo "    -u Treat filenames as URLs (e.g. tm -u www.google.com). Uses curl."
	echo "    -w Wait for the file window close before ending"
	echo ""
	exit 1;
fi

if (( $URL )); then
	for filename; do
		echo "$filename";
		prefix=/tmp/tm
		suffix=$(date +%s)  # The "+%s" option to 'date' is GNU-specific.
		tmpfile=$prefix.$suffix."html"
		curl -N -# "$filename" > $tmpfile 
		$OPEN "$tmpfile" 
	done
	exit 1;
fi


# are we dealing with a filename or are we using stdin?
if (( $# == 0 )); then
	if [ ! -t 0 ]; then
		exec 6<&0
		exec 7>&1
		prefix=/tmp/tm
		suffix=$(date +%s)  # The "+%s" option to 'date' is GNU-specific.
		filename=$prefix.$suffix
		$CREATE $filename
		exec > $filename
	
		while read a1
		do
		echo $a1
		done
		open -a TextMate.app $filename
		exec 0<&6 6<&-
		exec 1<&7 7<&-
	else
		if [ ! -z ${1} ]; then
			$CREATE ${1}
			$OPEN ${1}
		else
			$OPEN
		fi
	fi
elif (($PIPETITLE)); then
	for filename; do
		filename=$filename
	done
	if [ ! -t 0 ]; then
		exec 6<&0
		exec 7>&1
		$CREATE $filename
		exec > $filename

		while read a1
		do
		echo $a1
		done
		open -a TextMate.app $filename
		exec 0<&6 6<&-
		exec 1<&7 7<&-
	else
		if [ ! -z ${1} ]; then
			$CREATE ${1}
			$OPEN ${1}
		else
			$OPEN
		fi
	fi
else
	# iterate over the files
	for filename; do
		# create the file if requested
		if (( $CREATE_FILE )); then
			if [[ -f $filename ]]; then
				echo "File \`$filename' already exists."
			fi
			$CREATE $filename
		fi
		if [[ -e $filename ]]; then		# now also opens directories
			$OPEN "$filename"
		else
			echo "File \`$filename' does not exist."
		fi
	done
fi

if (($LINE)); then
osascript -e 'tell app "TextMate.app" to activate'
osascript <<EofSCRIPT
	tell app "System Events"
	    tell process "TextMate"
	        tell menu bar 1
	            tell menu bar item "Navigation"
	                tell menu "Navigation"
	                    click menu item "Go to Line..."
	                    -- delay 1
	                end tell
	            end tell
	        end tell
	        tell window "Go to Line"
	            set value of text field 1 to "$LINE"
	            -- delay 1
	            click button "Go to Line"
	        end tell
	    end tell
	end tell
EofSCRIPT
fi

if (($WAIT)); then
	# Old hack. echo "Hit RETURN to continue..."
	# read answer			

	# get ID of TM window:
	TMwindowid=`osascript -e 'tell app "TextMate.app" to return id of front window'`

	# wait until done editing the temp file:
	while [[ `osascript -e 'tell app "TextMate.app" to return name of every window whose id is '"$TMwindowid"` != "" ]]; do
	         sleep 1 # set this to something else if there's some need to
	done
	
	$OPENTERMAPP
fi