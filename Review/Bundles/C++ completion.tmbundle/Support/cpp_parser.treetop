grammar Cpp
rule cpp
statement+ {
	def types
		r = { :field => {}}
		elements.each do |e|
			key, value = e.types
			if key && value
			  if key == :current_type
			    r[key] = value
		    else
		      puts "r[:field][key] = value"
			    r[:field][key] = value 
			  end
		  end
		end
		return r
	end
}
end

rule statement
 'typedef' (explicit_space 'typename')? explicit_space complete_declare {
	def types
	  key, value, type = complete_declare.types
    s = value[:type]
    value[:typedef] = s
    value.delete(:type)
    puts key.inspect
    return key, value
	  #  return complete_declare.types
	end
}
/ complete_declare
/
current_type
/
allan_macro
/dec 
{
	def types
	end
}
/ 
string {
	def types
	end
}
/ other {
	def types
	end
}
end

rule complete_declare
st:(beginnings space)? dec space variable en:(space "=" !"=")? {
	def types
	  #heuristic to separate multiplications from pointer declarations
	  unless st.empty?
	    t = st.text_value.strip
	    if t == "=" || t == ","
	      return nil
      elsif t == "(" && en.empty?
        return nil
      end
    end
    
		return variable.text_value , [dec.types] ,:type
	end
}
end


rule current_type
	method_chain prefix {
		def types
			r = method_chain.types
			r << {:prefix => prefix.text_value}
			return :current_type, r
		end
	}
end

rule method_chain
	variable p:parens? tie m:method_chain? {
		def types
		  r = []
      if p.empty?
		    val = :field
		  else
			  val = :methods # + :access
		  end
		  num = (tie.text_value == "->" ? 1 : 0)
		  r <<  { :kind => val, :name => variable.text_value, :dref => num }		  
		  r << m.types unless m.empty? 
		  return r.flatten
		end
	}
	
/
'(' space dref:"*"* space m1:method_chain? variable p:parens? ')' tie m2:method_chain? {
  def types
    r = []
    r = m1.types unless m1.empty?
    if p.empty?
	    val = :fields
	  else
		  val = :methods # + :access
	  end
	  num = dref.text_value.size + (tie.text_value == "->" ? 1 : 0)
    r <<  { :kind => val, :name => variable.text_value, :dref => num }		  
    r << m2.types unless m2.empty? 
    return r.flatten
  end
}

end

rule allan_macro
	"iterate(" space it:variable space ',' space dref:'*'* space mc:method_chain? variable p:parens? space ')' {
		def types
		    t = []
		    t << mc.types unless mc.empty?
		    if p.empty?
    	      val = :field
    		else
    		  val = :methods # + :access
    		end
    		t << { :kind => val, :name => variable.text_value, :dref => dref.text_value.size} 
		    
		    r = { :type_of => t.flatten, :iterator =>true  }
    		return it.text_value, r
		end
}
end 

rule parens
 '(' ')' / '(' inner+ ')' 
end

rule inner
	(!('(' / ')') . ) / parens
end

rule prefix
 ([a-zA-Z_] [a-zA-Z0-9_]* )? caret
end

rule tie
	('.' / '->')
end

rule caret
  !.
end

rule dec
std
/
declaration
end

rule std
"std::" variable template it:"::iterator"? pointer:"*"* {
	def types # key
	  key = :type
		r= template.types
		r[key] = "std::" + variable.text_value + it.text_value
		r[:pointers] = pointer.text_value.size()
		return r
	end

}
end

rule declaration
text:("::"? variable )+ pointer:"*"* {
	def types #key
 
	  key = :type
	  r = {}
	  r[key] = text.text_value
	  r[:pointers] = pointer.text_value.size()
		return r
	end
}
end

rule beginnings
"=" / "(" / ","
end


rule variable
[a-zA-Z_] [_a-zA-Z0-9]* {
	def types		 
	end
}
end

rule template
'<' space contains:(first:dec space following:(',' space val:dec )*)? space '>' {
	def types
		r = {}
		if contains.elements
			r[1] = contains.elements.first.types 
			i = 2
			contains.following.elements.each {|e| r[i] =e.val.types; i+=1} if contains.following.elements
		end
		
		return :t => r
	end
}
end

rule string
 '"' (!'"' . / '\"')* '"'
end

rule space
 [ ]* 
end

rule explicit_space
 [ ]+
end	
rule other
.
end
end